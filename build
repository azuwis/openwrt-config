#!/bin/bash
set -e

# profiles
profiles=(wg3526 wg3526_audit wg3526_iptv wg3526_luci wg3526_office wdr4300 mw4530r mw4530r_yate x86)
wg3526='wg3526 acme adblock asterisk curl ddns dnsmasq freeradius fwknopd mactelnet miniupnpd nlbwmon shadowsocks sqm tcpdump vlmcsd watchcat wireguard wpad'
wg3526_audit='wg3526 aircrack arp-scan dsniff ettercap iputils-arping mdk3 netdiscover nmap-ssl tcpdump tmux wpad'
wg3526_iptv='wg3526 curl kmod-ipt-offload wpad'
wg3526_luci='wg3526 luci wpad'
wg3526_office='wg3526 adblock avahi-nodbus-daemon curl dnsmasq shadowsocks vlmcsd wireguard wpad'
mw4530r='mw4530r adblock curl ddns dnsmasq freeradius mactelnet miniupnpd nlbwmon shadowsocks sqm tcpdump vlmcsd watchcat wireguard wpad'
mw4530r_yate='mw4530r adblock yate ddns dnsmasq freeradius miniupnpd shadowsocks sqm watchcat vlmcsd wireguard wpad'
wdr4300='wdr4300 wpad'
x86='x86'
x86_acme='x86 acme acme-dnsapi luci luci-app-acme luci-app-uhttpd'
x86_fwknopd='x86 fwknopd luci luci-app-fwknopd'
x86_luci2='x86 luci2'
x86_vuci='x86 vuci'

# common
config_common='
CONFIG_CCACHE=y
CONFIG_DEVEL=y
CONFIG_KERNEL_BUILD_DOMAIN="builds"
CONFIG_KERNEL_BUILD_USER="buildbot"
CONFIG_OPENSSL_OPTIMIZE_SPEED=y
CONFIG_PACKAGE_diffutils=y
CONFIG_PACKAGE_wpa-cli=y
'

# targets
config_mw4530r='
CONFIG_TARGET_ar71xx=y
CONFIG_TARGET_ar71xx_generic=y
CONFIG_TARGET_ar71xx_generic_DEVICE_mw4530r-v1=y
'

config_wdr4300='
CONFIG_TARGET_ath79=y
CONFIG_TARGET_ath79_generic=y
CONFIG_TARGET_ath79_generic_DEVICE_tplink_tl-wdr4300=y
'

config_wg3526='
CONFIG_TARGET_ramips=y
CONFIG_TARGET_ramips_mt7621=y
CONFIG_TARGET_ramips_mt7621_DEVICE_zbt-wg3526-16M=y
'

config_x86='
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_Generic=y
CONFIG_VDI_IMAGES=y
'

# custom feeds
custom_openwrt='azuwis master https://github.com/azuwis/openwrt.git'
custom_packages='azuwis master https://github.com/azuwis/openwrt-packages.git'
# custom_telephony='azuwis master https://github.com/azuwis/openwrt-telephony.git'

# modules
config_adblock='
CONFIG_PACKAGE_adblock=y
CONFIG_PACKAGE_ca-bundle=y
CONFIG_PACKAGE_libustream-openssl=y
'

config_aircrack='
CONFIG_PACKAGE_aircrack-ng=y
CONFIG_PACKAGE_airmon-ng=y
CONFIG_PACKAGE_grep=y
CONFIG_PACKAGE_kmod-tun=y
CONFIG_PACKAGE_pciutils=y
CONFIG_PACKAGE_procps-ng=y
CONFIG_PACKAGE_procps-ng-ps=y
# CONFIG_PACKAGE_procps-ng-free is not set
# CONFIG_PACKAGE_procps-ng-kill is not set
# CONFIG_PACKAGE_procps-ng-pgrep is not set
# CONFIG_PACKAGE_procps-ng-pkill is not set
# CONFIG_PACKAGE_procps-ng-pmap is not set
# CONFIG_PACKAGE_procps-ng-pwdx is not set
# CONFIG_PACKAGE_procps-ng-skill is not set
# CONFIG_PACKAGE_procps-ng-slabtop is not set
# CONFIG_PACKAGE_procps-ng-snice is not set
# CONFIG_PACKAGE_procps-ng-tload is not set
# CONFIG_PACKAGE_procps-ng-top is not set
# CONFIG_PACKAGE_procps-ng-uptime is not set
# CONFIG_PACKAGE_procps-ng-vmstat is not set
# CONFIG_PACKAGE_procps-ng-w is not set
# CONFIG_PACKAGE_procps-ng-watch is not set
CONFIG_PACKAGE_usbutils=y
'

config_asterisk_pjsip='
CONFIG_PACKAGE_asterisk15=y
CONFIG_PACKAGE_asterisk15-bridge-simple=y
CONFIG_PACKAGE_asterisk15-pjsip=y
CONFIG_PACKAGE_asterisk15-res-rtp-asterisk=y
CONFIG_PACKAGE_asterisk15-res-srtp=y
'

config_asterisk_sip='
CONFIG_PACKAGE_asterisk15=y
CONFIG_PACKAGE_asterisk15-chan-sip=y
CONFIG_PACKAGE_asterisk15-res-rtp-asterisk=y
CONFIG_PACKAGE_asterisk15-res-srtp=y
'

config_asterisk="$config_asterisk_pjsip"

# config_curl='
# CONFIG_PACKAGE_curl=y
# CONFIG_LIBCURL_OPENSSL=y
# '

config_ddns='
CONFIG_PACKAGE_ca-bundle=y
CONFIG_PACKAGE_ddns-scripts=y
'

config_dnsmasq='
# CONFIG_PACKAGE_dnsmasq is not set
CONFIG_PACKAGE_dnsmasq-full=y
CONFIG_PACKAGE_dnsmasq_full_dhcp=y
CONFIG_PACKAGE_dnsmasq_full_ipset=y
CONFIG_PACKAGE_dnsmasq_full_noid=y
# CONFIG_PACKAGE_dnsmasq_full_auth is not set
# CONFIG_PACKAGE_dnsmasq_full_conntrack is not set
# CONFIG_PACKAGE_dnsmasq_full_dhcpv6 is not set
# CONFIG_PACKAGE_dnsmasq_full_dnssec is not set
'

feed_ettercap='src-git oldpackages https://github.com/plntyk/oldpackages.git'
custom_oldpackages='azuwis master https://github.com/azuwis/openwrt-oldpackages.git'

config_freeradius='
CONFIG_PACKAGE_freeradius3=y
CONFIG_PACKAGE_freeradius3-mod-always=y
CONFIG_PACKAGE_freeradius3-mod-attr-filter=y
CONFIG_PACKAGE_freeradius3-mod-eap=y
CONFIG_PACKAGE_freeradius3-mod-eap-mschapv2=y
CONFIG_PACKAGE_freeradius3-mod-eap-peap=y
CONFIG_PACKAGE_freeradius3-mod-eap-tls=y
CONFIG_PACKAGE_freeradius3-mod-files=y
CONFIG_PACKAGE_freeradius3-mod-mschap=y
'

config_kallsyms='CONFIG_KERNEL_KALLSYMS=y'

config_luci='
CONFIG_PACKAGE_luci=y
CONFIG_PACKAGE_luci-theme-material=y
'
config_luci_zh='
CONFIG_LUCI_LANG_zh-cn=y
'

feed_luci2='src-git luci2 https://github.com/jow-/luci-ng.git'
config_luci2='CONFIG_PACKAGE_luci2-ui-base=y'

config_mactelnet='
CONFIG_PACKAGE_mac-telnet-client=y
CONFIG_PACKAGE_mac-telnet-discover=y
'

config_mwan='
CONFIG_PACKAGE_ip-full=y
CONFIG_PACKAGE_kmod-macvlan=y
CONFIG_PACKAGE_mwan3=y
'

config_noipv6='
# CONFIG_IPV6 is not set
# CONFIG_KERNEL_IPV6 is not set
# CONFIG_PACKAGE_libip6tc is not set
# CONFIG_PACKAGE_odhcpd is not set
'

config_sfe='
CONFIG_PACKAGE_kmod-fast-classifier=y
CONFIG_PACKAGE_kmod-shortcut-fe=y
'

config_shadowsocks='
CONFIG_PACKAGE_shadowsocks-libev-ss-rules=y
CONFIG_PACKAGE_unbound=y
'

config_sqm='
CONFIG_PACKAGE_kmod-sched-cake=y
CONFIG_PACKAGE_sqm-scripts=y
'

feed_vlmcsd='src-git-full azuwis https://github.com/azuwis/openwrt-azuwis.git'

feed_vuci='src-git vuci https://github.com/zhaojh329/vuci.git'
config_vuci='
CONFIG_PACKAGE_vuci-ui-base=y
'

config_wpad='
# CONFIG_PACKAGE_wpad-mini is not set
CONFIG_PACKAGE_wpad=y
CONFIG_WPA_MSG_MIN_PRIORITY=1
CONFIG_WPA_SUPPLICANT_OPENSSL=y
'

config_yate='
CONFIG_PACKAGE_yate=y
CONFIG_PACKAGE_yate-mod-openssl=y
CONFIG_PACKAGE_yate-mod-regexroute=y
CONFIG_PACKAGE_yate-mod-regfile=y
CONFIG_PACKAGE_yate-mod-yrtpchan=y
CONFIG_PACKAGE_yate-mod-ysipchan=y
'

feed_xkcptun='src-git xkcptun https://github.com/gigibox/openwrt-xkcptun.git'

generate_config() {
    local target="$@"

    echo "$config_common"

    local module
    for module in $target
    do
        config="config_$module"
        config="${!config}"
        if [ -n "$config" ]
        then
            echo "$config"
        else
            echo "CONFIG_PACKAGE_${module}=y"
        fi
    done
}

hr() {
    echo '------------------------------------------------------------'
}

custom_source() {
    local dir config
    dir="$1"
    config="$2"

    pushd "$dir" >/dev/null
    local remote branch url
    read -r remote branch url <<<"$config"
    if ! git remote | grep -qFx "$remote"
    then
        git remote add "$remote" "$url"
    fi
    if [ "$update_source" = "yes" ]; then
        git pull "$remote" "$branch"
        git rebase origin/master
    fi
    if [ "$push_custom" = "yes" ]; then
        git push --force "$remote" "$branch"
    fi
    popd >/dev/null
}

update_source() {
    local target="$@"

    if [ "$update_source" = "yes" ]; then
        hr
        echo "OpenWRT: Update from origin/master"
        GIT_MERGE_AUTOEDIT=no git pull --rebase origin master
    fi
    echo "Override: openwrt => $custom_openwrt"
    custom_source . "$custom_openwrt"

    cp feeds.conf.default feeds.conf

    local module
    for module in $target
    do
        local feed
        feed="feed_$module"
        feed="${!feed}"
        if [ -n "$feed" ]
        then
            echo "Custom: $feed"
            echo "$feed" >> feeds.conf
            local _ feed_name _
            read -r _ feed_name _ <<<"$feed"
            custom_feeds="$custom_feeds $feed_name"
        fi
    done

    local feed
    for feed in $(awk '/^src-git / {print $2}' feeds.conf)
    do
        local custom
        custom="custom_$feed"
        custom="${!custom}"
        if [ -n "$custom" ]
        then
            sed -i "s/^src-git $feed /src-git-full $feed /" feeds.conf
        fi
    done
    if [ "$update_source" = "yes" ]; then
        GIT_MERGE_AUTOEDIT=no ./scripts/feeds update -a
    fi

    for feed in $(awk '/^src-git-full / {print $2}' feeds.conf)
    do
        local custom
        custom="custom_$feed"
        custom="${!custom}"
        if [ -n "$custom" ]
        then
            echo "Override: $feed => $custom"
            custom_source "feeds/$feed" "$custom"
        fi
    done

    if [ "$update_source" = "yes" ]; then
        hr
        echo 'Feeds install:'
        ./scripts/feeds install -a
    fi
}

push_packages() {
    hr
    echo "Binary packages:"
    if ! [ -e binary-packages ]
    then
        git clone --branch gh-pages https://github.com/azuwis/openwrt-binary-packages.git
    fi
    for feed in $custom_feeds
    do
        rsync -avR --delete bin/packages/./*/$feed/ binary-packages/
    done
    pushd binary-packages >/dev/null
    git add .
    if [ "$(git status --porcelain | grep -cEv '/(Packages\.sig)$')" -gt 0 ]
    then
        git commit -m 'Update'
        git push
    fi
    popd >/dev/null
}

while getopts ":Pgpu" option
do
    case "$option" in
        P) push_packages_only="yes" ;;
        g) generate_only="yes" ;;
        p) push_custom="yes" ;;
        u) update_source="yes" ;;
    esac
done
shift "$((OPTIND-1))"

targets="$@"
if [ -z "$targets" ]
then
    for i in "${!profiles[@]}"
    do
        printf "%s %s\n" "[$((i+1))]" "${profiles[$i]}"
    done
    echo -en "\ntargets:\033[1A\radd: "
    while read i
    do
        if [ "$i" = '' ]
        then
            if [ -z "$targets" ]
            then
                targets="${profiles[0]}"
                echo -e "targets: ${targets}\033[1A\033[2K\radd: "
            fi
            break
        fi
        targets="${profiles[$((i-1))]} $targets"
        echo -en "targets: ${targets}\033[1A\033[2K\radd: "
    done
    echo
fi

for target in $targets
do
    modules="${!target}"
    if [ -z "$modules" ]
    then
        echo "No target found: $target"
        exit 1
    fi

    hr
    echo "Feeds: $target"
    custom_feeds=''
    update_source "$modules"

    if [ "$push_packages_only" = "yes" ]
    then
        push_packages
        continue
    fi

    hr
    echo "Config: $target"
    generate_config "$modules" > .config
    make defconfig
    ./scripts/diffconfig.sh

    if [ "$generate_only" != "yes" ]
    then
        hr
        echo "Build: $target"
        extra_image_name="${target#*_}"
        if [ "$extra_image_name" == "$target" ]
        then
            make -j12
        else
            make -j12 EXTRA_IMAGE_NAME="$extra_image_name"
        fi
        push_packages
    fi
done
